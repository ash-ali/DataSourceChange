#spring boot自动配置单数据源
spring.datasource.url=jdbc:mysql://localhost:3306/datasource1?useSSL=false&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&allowMultiQueries=true
spring.datasource.username=root
spring.datasource.password=1111
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource

##手动配置多数据源
#Mysql--datasource1
spring.datasource.druid.datasource1.url=jdbc:mysql://localhost:3306/datasource1?useSSL=false&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&allowMultiQueries=true
spring.datasource.druid.datasource1.username=root
spring.datasource.druid.datasource1.password=1111
spring.datasource.druid.datasource1.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.datasource1.type = com.alibaba.druid.pool.DruidDataSource
##################    连接池配置    ################
#连接池建立时创建的初始化连接数
spring.datasource.druid.datasource1.initial-size=3
#连接池中最大的活跃连接数
spring.datasource.druid.datasource1.max-active=15
#连接池中最小的活跃连接数
spring.datasource.druid.datasource1.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.datasource1.max-wait=60000
#是否在获得连接后检测其可用性
spring.datasource.druid.datasource1.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.datasource1.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.datasource1.test-while-idle=true


#Mysql--datasource2
spring.datasource.druid.datasource2.url=jdbc:mysql://localhost:3306/datasource2?useSSL=false&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&allowMultiQueries=true
spring.datasource.druid.datasource2.username=root
spring.datasource.druid.datasource2.password=1111
spring.datasource.druid.datasource2.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.datasource2.type = com.alibaba.druid.pool.DruidDataSource
#连接池建立时创建的初始化连接数
spring.datasource.druid.datasource2.initial-size=3
#连接池中最大的活跃连接数
spring.datasource.druid.datasource2.max-active=15
#连接池中最小的活跃连接数
spring.datasource.druid.datasource2.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.datasource2.max-wait=60000
#是否在获得连接后检测其可用性
spring.datasource.druid.datasource2.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.datasource2.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.datasource2.test-while-idle=true





# 下面为连接池的补充设置，应用到上面所有数据源中
spring.datasource.max-idle=10
spring.datasource.max-wait=10000
spring.datasource.min-idle=5
spring.datasource.initial-size=5

# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
spring.datasource.logSlowSql=true

server.port=8086
server.tomcat.uri-encoding=UTF-8

# 配置Mybatis
mybatis.configLocations= classpath:mybatis-config.xml
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.webdemo.webservice.Entity

#MongoDB
spring.data.mongodb.uri= mongodb://localhost:27017/test

# 定位页面的目录到static/下
spring.mvc.view.prefix=/
spring.mvc.view.suffix=.html

# 日志输出
#logging.file=D:/data/webservicelog


